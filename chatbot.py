from datetime import datetime, date, time
from typing import Dict, Any, List, Optional
import os
import logging
from dotenv import load_dotenv
from config import Config
from langchain_openai import ChatOpenAI
from langchain_core.messages import AIMessage, HumanMessage, SystemMessage
from langchain_core.output_parsers import StrOutputParser
from langchain_core.prompts import ChatPromptTemplate
import os
from sqlalchemy.orm import Session
from database import SessionLocal
from models import Medecin, RendezVous, Patient, StatutRendezVous
from sqlalchemy import or_

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()

# Initialiser la configuration
config = Config()

class ChatBot:
    def __init__(self, patient_manager):
        """Initialiser le chatbot"""
        self.patient_manager = patient_manager
        # Configuration du mod√®le OpenAI
        self.llm = ChatOpenAI(
            model_name="gpt-3.5-turbo",
            temperature=0.7,
            max_tokens=1000,
            openai_api_key=os.getenv("OPENAI_API_KEY")
        )
        self.output_parser = StrOutputParser()
        
        # Initialize chat state
        self.chat_state = {}
        self.chat_history: List[AIMessage | HumanMessage | SystemMessage] = [
            SystemMessage(content="Tu es un assistant m√©dical de la clinique. R√©ponds toujours en fran√ßais."),
            AIMessage(content="Bonjour ! Je suis votre assistant virtuel. Je peux vous aider √† :\n"
                     "1. Prendre un rendez-vous\n"
                     "2. Consulter vos rendez-vous\n"
                     "3. R√©pondre √† vos questions\n\n"
                     "Comment puis-je vous aider aujourd'hui ?")
        ]

        
    def get_user_state(self, user_id: str) -> Dict[str, Any]:
        """R√©cup√©rer l'√©tat de la conversation pour un utilisateur"""
        return self.chat_state.get(user_id, [])

    def update_user_state(self, user_id: str, state: Dict[str, Any]):
        """Mettre √† jour l'√©tat de la conversation pour un utilisateur"""
        self.chat_state[user_id] = state

    def clear_user_state(self, user_id: str):
        """Effacer l'√©tat de la conversation pour un utilisateur"""
        if user_id in self.chat_state:
            del self.chat_state[user_id]

    def _handle_appointment_cancel(self, user_id: str) -> str:
        """G√©rer l'annulation d'un rendez-vous"""
        self.clear_user_state(user_id)
        return "La cr√©ation du rendez-vous a √©t√© annul√©e üö´. Pour en cr√©er un autre, dites 'Je veux un rendez-vous'."

    def _handle_new_appointment(self, user_id: str) -> str:
        """G√©rer une nouvelle demande de rendez-vous"""
        # R√©cup√©rer la liste des m√©decins depuis la base de donn√©es
        from database import SessionLocale
        from models import Medecin
        
        session = SessionLocale()
        try:
            medecins = session.query(Medecin).all()
            doctors = [f"{medecin.prenom} {medecin.nom} ({medecin.specialite or 'Sp√©cialit√© non sp√©cifi√©e'})" for medecin in medecins]
            
            if not doctors:
                return "D√©sol√©, aucun m√©decin n'est actuellement disponible. Veuillez r√©essayer plus tard."
                
            self.update_user_state(user_id, {
                "progress": "doctor",
                "data": {}
            })
            doctors_list = "\n".join([f"- {doc}" for doc in doctors])
            return "Voici les m√©decins disponibles :\n" + doctors_list
        except Exception as e:
            logging.error(f"Erreur lors de la r√©cup√©ration des m√©decins: {str(e)}")
            return "Une erreur est survenue lors de la r√©cup√©ration des m√©decins. Veuillez r√©essayer plus tard."
        finally:
            session.close()

    def _handle_doctor_selection(self, user_id: str, message: str, data: Dict[str, Any]) -> str:
        """G√©rer la s√©lection du m√©decin"""
        doctor = message  # √Ä remplacer par une vraie v√©rification
        self.update_user_state(user_id, {
            "progress": "date",
            "data": {**data, "doctor": doctor}
        })
        return f"Pour quelle date souhaitez-vous un rendez-vous avec {doctor} ? (format: AAAA-MM-JJ)"

    def _handle_date_selection(self, user_id: str, message: str, data: Dict[str, Any]) -> str:
        """G√©rer la s√©lection de la date"""
        try:
            datetime.strptime(message, "%Y-%m-%d")
            self.update_user_state(user_id, {
                "progress": "time",
                "data": {**data, "date": message}
            })
            return "√Ä quelle heure ? (format: HH:MM)"
        except ValueError:
            return "Format de date invalide. Utilisez AAAA-MM-JJ."

    def _handle_time_selection(self, user_id: str, message: str, data: Dict[str, Any]) -> str:
        """G√©rer la s√©lection de l'heure"""
        try:
            datetime.strptime(message, "%H:%M")
            self.update_user_state(user_id, {
                "progress": "confirmation",
                "data": {**data, "time": message}
            })
            return (
                "üìÖ R√©sum√© :\n"
                f"üë®‚Äç‚öïÔ∏è M√©decin : {data['doctor']}\n"
                f"üìÖ Date : {data['date']}\n"
                f"‚è∞ Heure : {message}\n\n"
                "Confirmez-vous ce rendez-vous ? (oui/non)"
            )
        except ValueError:
            return "Format d'heure invalide. Utilisez HH:MM."

    def handle_appointment_creation(self, user_id: str, message: str) -> str:
        """G√©rer le processus de cr√©ation de rendez-vous"""
        state = self.get_user_state(user_id)
        progress = state.get("progress")
        data = state.get("data", {})

        # Annulation
        if message.lower() in ["annuler", "je veux annuler", "annuler le rendez-vous", "stop"]:
            return self._handle_appointment_cancel(user_id)

        # Nouvelle demande de rendez-vous
        if message.lower() in ["je veux un rendez-vous", "je veux prendre rendez-vous", "rendez-vous"]:
            return self._handle_new_appointment(user_id)

        if not progress:
            return self.get_ai_response(message)

        # S√©lection du m√©decin
        if progress == "doctor":
            return self._handle_doctor_selection(user_id, message, data)

        # S√©lection de la date
        if progress == "date":
            return self._handle_date_selection(user_id, message, data)

        # S√©lection de l'heure
        if progress == "time":
            return self._handle_time_selection(user_id, message, data)

        # Confirmation
        if progress == "confirmation":
            return self._handle_confirmation(user_id, message, data)

        return "Je n'ai pas compris. Pouvez-vous reformuler ?"

    def _handle_confirmation(self, user_id: str, message: str, data: Dict[str, Any]) -> str:
        """G√©rer la confirmation du rendez-vous"""
        if message.lower() in ["oui", "je confirme", "confirmer"]:
            return self._confirm_appointment(user_id, data)
        if message.lower() in ["non", "annuler"]:
            self.clear_user_state(user_id)
            return "Rendez-vous annul√©. Je peux vous aider pour autre chose ?"
        return "Veuillez r√©pondre par oui ou non."

    def _confirm_appointment(self, user_id: str, data: Dict[str, Any]) -> str:
        """Confirmer le rendez-vous dans la base de donn√©es"""
        db = SessionLocal()
        try:
            # R√©cup√©rer l'ID du patient depuis l'utilisateur connect√©
            patient = db.query(Patient).filter(Patient.email == user_id).first()
            if not patient:
                return "‚ùå Patient non trouv√©. Veuillez vous connecter."
            
            # Extraire le nom du m√©decin du format "Pr√©nom Nom (Sp√©cialit√©)"
            medecin_nom = data['doctor'].split(' (')[0]
            prenom_medecin, nom_medecin = medecin_nom.split(' ', 1) if ' ' in medecin_nom else (medecin_nom, '')
            
            # Trouver le m√©decin dans la base de donn√©es
            medecin = db.query(Medecin).filter(
                Medecin.prenom == prenom_medecin,
                Medecin.nom == nom_medecin
            ).first()
            
            if not medecin:
                return "‚ùå M√©decin non trouv√©. Veuillez r√©essayer."
            
            # Cr√©er le rendez-vous
            date_rdv = datetime.strptime(f"{data['date']} {data['time']}", "%Y-%m-%d %H:%M")
            
            # V√©rifier les conflits de rendez-vous
            conflit = db.query(RendezVous).filter(
                RendezVous.medecin_id == medecin.id,
                RendezVous.date == date_rdv.date(),
                RendezVous.heure == date_rdv.time(),
                RendezVous.statut != StatutRendezVous.ANNULE
            ).first()
            
            if conflit:
                return "‚ùå Ce cr√©neau n'est plus disponible. Veuillez en choisir un autre."
            
            # Cr√©er le rendez-vous
            nouveau_rdv = RendezVous(
                patient_id=patient.id,
                medecin_id=medecin.id,
                hopital_id=1,  # √Ä adapter selon votre logique
                nom_medecin=f"{medecin.prenom} {medecin.nom}",
                date=date_rdv.date(),
                heure=date_rdv.time(),
                statut=StatutRendezVous.PLANIFIE,
                motif=data.get('motif', 'Consultation')
            )
            
            db.add(nouveau_rdv)
            db.commit()
            
            self.clear_user_state(user_id)
            return (
                f"üéâ Rendez-vous confirm√© avec {medecin.prenom} {medecin.nom} "
                f"le {date_rdv.strftime('%d/%m/%Y')} √† {date_rdv.strftime('%H:%M')}.\n"
                "Vous recevrez un rappel avant votre rendez-vous."
            )
            
        except Exception as e:
            db.rollback()
            logger.error(f"Erreur lors de la cr√©ation du rendez-vous: {str(e)}")
            return "‚ùå Une erreur est survenue lors de la cr√©ation du rendez-vous. Veuillez r√©essayer."
        finally:
            db.close()

    def get_ai_response(self, message: str) -> str:
        """Obtenir une r√©ponse de l'IA pour les messages g√©n√©raux et les questions de sant√©"""
        try:
            # V√©rifier d'abord si c'est une question de sant√©
            is_health_question = any(keyword in message.lower() for keyword in [
                "sant√©", "sante", "malade", "maladie", "sympt√¥me", "symptome", 
                "mal de t√™te", "fi√®vre", "fievre", "douleur", "traitement", "m√©dicament"
            ])
            
            # Cr√©er le syst√®me de prompt en fonction du type de question
            if is_health_question:
                system_prompt = """
                Tu es un assistant m√©dical professionnel. 
                Fournis des r√©ponses claires et pr√©cises sur les questions de sant√©.
                Sois bienveillant et rassurant, mais toujours pr√©cis.
                
                Pour toute question m√©dicale s√©rieuse ou en cas de sympt√¥mes graves,
                conseille imm√©diatement de consulter un professionnel de sant√©.
                
                R√©ponds en fran√ßais, de mani√®re structur√©e et facile √† comprendre.
                """
            else:
                system_prompt = """
                Tu es l'assistant virtuel d'une clinique m√©dicale. 
                R√©ponds aux questions de mani√®re professionnelle et courtoise.
                
                Tu peux aider avec :
                - La prise de rendez-vous
                - Les informations sur la clinique
                - Les horaires d'ouverture
                - Les services propos√©s
                - Les questions g√©n√©rales sur la sant√©
                
                R√©ponds toujours en fran√ßais.
                """
            
            # Pr√©parer l'historique de la conversation
            messages = [
                {"role": "system", "content": system_prompt}
            ]
            
            # Ajouter l'historique r√©cent (limit√© √† 4 derniers √©changes)
            for msg in self.chat_history[-4:]:
                if isinstance(msg, HumanMessage):
                    messages.append({"role": "user", "content": msg.content})
                elif isinstance(msg, AIMessage):
                    messages.append({"role": "assistant", "content": msg.content})
            
            # Ajouter le nouveau message de l'utilisateur
            messages.append({"role": "user", "content": message})
            
            # Obtenir la r√©ponse du mod√®le
            response = self.llm.invoke(messages)
            
            # Extraire le contenu de la r√©ponse
            if hasattr(response, 'content'):
                response_text = response.content
            else:
                response_text = str(response)
            
            # Ajouter des avertissements pour les questions de sant√©
            if is_health_question:
                response_text += "\n\n‚ö†Ô∏è Important : Ces informations sont fournies √† titre informatif uniquement " \
                              "et ne constituent pas un avis m√©dical. En cas de probl√®me de sant√©, " \
                              "veuillez consulter un professionnel de sant√© qualifi√©."
            
            return response_text
            
        except Exception as e:
            logger.error(f"Erreur lors de la g√©n√©ration de la r√©ponse: {str(e)}")
            return "D√©sol√©, je rencontre des difficult√©s techniques. Pouvez-vous reformuler votre demande ?"

    def get_upcoming_appointments(self, user_id: str) -> str:
        """R√©cup√©rer les rendez-vous √† venir du patient"""
        db = SessionLocal()
        try:
            patient = db.query(Patient).filter(Patient.email == user_id).first()
            if not patient:
                return "‚ùå Patient non trouv√©. Veuillez vous connecter."
                
            maintenant = datetime.now()
            rdvs = db.query(RendezVous).join(Medecin).filter(
                RendezVous.patient_id == patient.id,
                RendezVous.statut == StatutRendezVous.PLANIFIE,
                RendezVous.date >= maintenant.date()
            ).order_by(RendezVous.date, RendezVous.heure).all()
            
            if not rdvs:
                return "Vous n'avez aucun rendez-vous √† venir."
                
            response = ["üìÖ Vos prochains rendez-vous :"]
            for rdv in rdvs:
                response.append(
                    f"- {rdv.date.strftime('%d/%m/%Y')} √† {rdv.heure.strftime('%H:%M')} "
                    f"avec {rdv.nom_medecin} ({'Confirm√©' if rdv.statut == StatutRendezVous.CONFIRME else 'Planifi√©'})"
                )
                
            return "\n".join(response)
            
        except Exception as e:
            logger.error(f"Erreur lors de la r√©cup√©ration des rendez-vous: {str(e)}")
            return "‚ùå Impossible de r√©cup√©rer vos rendez-vous. Veuillez r√©essayer."
        finally:
            db.close()

    def cancel_appointment(self, user_id: str, rdv_id: int) -> str:
        """Annuler un rendez-vous"""
        db = SessionLocal()
        try:
            rdv = db.query(RendezVous).filter(
                RendezVous.id == rdv_id,
                RendezVous.patient.has(email=user_id),
                RendezVous.statut != StatutRendezVous.ANNULE
            ).first()
            
            if not rdv:
                return "‚ùå Rendez-vous non trouv√© ou d√©j√† annul√©."
                
            rdv.statut = StatutRendezVous.ANNULE
            db.commit()
            return "‚úÖ Le rendez-vous a bien √©t√© annul√©."
            
        except Exception as e:
            db.rollback()
            logger.error(f"Erreur lors de l'annulation du rendez-vous: {str(e)}")
            return "‚ùå Une erreur est survenue lors de l'annulation. Veuillez r√©essayer."
        finally:
            db.close()

    def chat(self, user_id: str, message: str) -> str:
        """Point d'entr√©e principal du chatbot"""
        message_lower = message.lower()
        
        # Gestion des commandes sp√©ciales
        if message_lower in ["mes rdv", "mes rendez-vous", "afficher mes rendez-vous"]:
            return self.get_upcoming_appointments(user_id)
            
        # Annulation de rendez-vous
        if any(cmd in message_lower for cmd in ["annuler rdv", "annuler le rdv", "annuler rendez-vous"]):
            # Ici, vous pourriez ajouter une logique pour identifier le RDV √† annuler
            # Par exemple, en demandant confirmation ou en affichant la liste des RDV annulables
            return "Veuillez pr√©ciser l'ID du rendez-vous √† annuler. Vous pouvez d'abord demander 'Mes rendez-vous' pour voir la liste."
        
        # Gestion des num√©ros de RDV pour annulation (ex: "annuler rdv 123")
        if message_lower.startswith("annuler rdv ") and message_lower[11:].strip().isdigit():
            rdv_id = int(message_lower[11:].strip())
            return self.cancel_appointment(user_id, rdv_id)
        
        # Traitement standard des messages
        if message_lower == "oui" and self.get_user_state(user_id).get("progress") is None:
            response = (
                "Comment puis-je vous aider ? Voici ce que je peux faire pour vous :\n"
                "‚Ä¢ Prendre un rendez-vous\n"
                "‚Ä¢ Voir mes rendez-vous\n"
                "‚Ä¢ Poser une question sur la sant√©\n"
                "‚Ä¢ Annuler un rendez-vous"
            )
        elif any(keyword in message_lower for keyword in ["rendez-vous", "rdv", "consultation"]):
            response = self.handle_appointment_creation(user_id, message)
        else:
            response = self.get_ai_response(message)
            
        # Mettre √† jour l'historique du chat
        self.chat_history.append(HumanMessage(content=message))
        self.chat_history.append(AIMessage(content=response))
        return response
